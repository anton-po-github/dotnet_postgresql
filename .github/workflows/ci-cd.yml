name: CI/CD Pipeline

on:
  push:
    branches: [main]

permissions:
  contents: 'read'
  id-token: 'write' # нужен для Workload Identity или OIDC

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release
      - name: Test
        run: dotnet test --no-build --verbosity normal

  build_and_push:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1) Аутентификация в GCP (JSON key)
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) Установка gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 3) Конфигурация Docker для Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker \
          ${{ secrets.GCP_PROJECT_ID }}-docker.pkg.dev --quiet

      # 4) Сборка и пуш Docker‑образа
      - name: Build and Push Docker Image
        run: |
          IMAGE_URI="${{ secrets.GCP_PROJECT_ID }}-docker.pkg.dev/${{ secrets.GAR_LOCATION }}/${{ secrets.GAR_REPOSITORY }}/dotnet_postgresql:${{ github.sha }}"
          docker build -f Dockerfile -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
      - name: Set Image URI
        run: echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1) Аутентификация (повторно не нужна, но можно для наглядности)
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) Деплой в Cloud Run (без credentials_json тут)
      - uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: dotnet-postgresql-service
          image: ${{ needs.build_and_push.outputs.image_uri }}
          region: ${{ secrets.GAR_LOCATION }}
